#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

apc_temp_sensor_default_levels = {'levels': (28,30), 'levels_lower': (0, -5)}


def inventory_apc_temp_sensor(info):
    return [(line[0], "apc_temp_sensor_default_levels") for line in info]

def check_apc_temp_sensor(item, params, info):
    for line in info:
        if line[0] == item:
            temperature = saveint(line[1])
            warnlow, critlow = params['levels_lower']
            warnhigh, crithigh = params['levels']
            infotext = "%sC (warn/crit below %.1f/%.1f or above %.1f/%.1f C)" % \
                            ( temperature, warnlow, critlow, warnhigh, crithigh)
            perfdata = [ ( "temperature", temperature, critlow, warnlow, warnhigh, crithigh ) ]
            if temperature <= critlow or temperature >= crithigh:
                return (2, "Temperature is: " + infotext, perfdata )
            elif temperature <= warnlow or temperature >= warnhigh:
                return (1, "Temperature is: " + infotext, perfdata )
            else:
                return (0, "Temperature is: " + infotext, perfdata )

    return (3, "sensor not found in SNMP data")


check_info["apc_temp_sensor"] = {
    'check_function':          check_apc_temp_sensor,
    'inventory_function':      inventory_apc_temp_sensor,
    'service_description':     'Temperature %s',
    'has_perfdata':            True,
    'snmp_info':               ('.1.3.6.1.4.1.318.1.1.10.3.13.1.1', ['2', '3', '6']),
    'snmp_scan_function':      lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.318.1.3"),
    'group':                   'temperature',
}
