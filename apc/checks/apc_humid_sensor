#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

apc_humid_sensor_default_levels = {'levels': (35, 40), 'levels_lower': (10, 5)}


def inventory_apc_humid_sensor(info):
    return [(line[0], "apc_humid_sensor_default_levels") for line in info]

def check_apc_humid_sensor(item, params, info):
    for line in info:
        if line[0] == item:
            humidity = saveint(line[1])
            warnlow, critlow = params['levels_lower']
            warnhigh, crithigh = params['levels']
            infotext = "%s%% (warn/crit below %.1f/%.1f or above %.1f/%.1f %%)" % \
                            ( humidity, warnlow, critlow, warnhigh, crithigh)
            perfdata = [ ( "humidity", humidity, critlow, warnlow, warnhigh, crithigh ) ]
            if humidity <= critlow or humidity >= crithigh:
                return (2, "Humidity is: " + infotext, perfdata )
            elif humidity <= warnlow or humidity >= warnhigh:
                return (1, "Humidity is: " + infotext, perfdata )
            else:
                return (0, "Humidity is: " + infotext, perfdata )

    return (3, "sensor not found in SNMP data")


check_info["apc_humid_sensor"] = {
    'check_function':          check_apc_humid_sensor,
    'inventory_function':      inventory_apc_humid_sensor,
    'service_description':     'Humidity %s',
    'has_perfdata':            True,
    'snmp_info':               ('.1.3.6.1.4.1.318.1.1.10.3.13.1.1', ['9', '3', '6']),
    'snmp_scan_function':      lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.318.1.3"),
    'group':                   'humidity',
}
