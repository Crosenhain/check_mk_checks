#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

check_default_levels["barra_inbound"] = "barra_inbound_default_levels"

factory_settings["barra_inbound_default_levels"] = {
	"hourlyInboundBlocked" : (5000, 10000),
	"hourlyInboundVirusBlocked" : (5000, 10000),
	"hourlyInboundRateControlled" : (5000, 10000),
	"hourlyInboundQuarantined" : (5000, 10000),
	"hourlyInboundTagged" : (5000, 10000),
	"hourlyAllowed" : (5000, 10000)
}

def inventory_barra_inbound (info):

	# Debug: lets see how the data we get looks like
	#import pprint
	#if info[0]:
	#	pprint.pprint(info[0])
	#	pprint.pprint(len(info[0][0]))
	#return []
	
	inventory = []

	for hourlyInboundBlocked, hourlyInboundVirusBlocked, hourlyInboundRateControlled, hourlyInboundQuarantined, hourlyInboundTagged, hourlyAllowed in info[0]:
		inventory.append( ("Cuda inbound", {}) )

	return inventory



def check_barra_inbound (item, params, info):
	# Debug: lets see how the data we get looks like
	#import pprint
	#if info[0]:
	#	pprint.pprint(info[0])
	#	pprint.pprint(len(info[0][0]))
	#return []

	if len(info) != 1:
		return(3, "UNKNOWN - Invalid output from Agent")

	moduleinfo = {}
	perfdata = []
	severity = "OK"
	rc = 0
	infotext = "Inbound Messages"

	# Get warn/crit values
	hourlyInboundBlockedparams = params.get("hourlyInboundBlocked")
	if hourlyInboundBlockedparams == None:
		hourlyInboundBlockedwarn, hourlyInboundBlockedcrit = None, None
	else:
		hourlyInboundBlockedwarn, hourlyInboundBlockedcrit = hourlyInboundBlockedparams

	hourlyInboundVirusBlockedparams = params.get("hourlyInboundVirusBlocked")
	if hourlyInboundVirusBlockedparams == None:
		hourlyInboundVirusBlockedwarn, hourlyInboundVirusBlockedcrit = None, None
	else:
		hourlyInboundVirusBlockedwarn, hourlyInboundVirusBlockedcrit = hourlyInboundVirusBlockedparams

	hourlyInboundRateControlledparams = params.get("hourlyInboundRateControlled")
	if hourlyInboundRateControlledparams == None:
		hourlyInboundRateControlledwarn, hourlyInboundRateControlledcrit = None, None
	else:
		hourlyInboundRateControlledwarn, hourlyInboundRateControlledcrit = hourlyInboundRateControlledparams

	hourlyInboundQuarantinedparams = params.get("hourlyInboundQuarantined")
	if hourlyInboundQuarantinedparams == None:
		hourlyInboundQuarantinedwarn, hourlyInboundQuarantinedcrit = None, None
	else:
		hourlyInboundQuarantinedwarn, hourlyInboundQuarantinedcrit = hourlyInboundQuarantinedparams

	hourlyInboundTaggedparams = params.get("hourlyInboundTagged")
	if hourlyInboundTaggedparams == None:
		hourlyInboundTaggedwarn, hourlyInboundTaggedcrit = None, None
	else:
		hourlyInboundTaggedwarn, hourlyInboundTaggedcrit = hourlyInboundTaggedparams

	hourlyAllowedparams = params.get("hourlyAllowed")
	if hourlyAllowedparams == None:
		hourlyAllowedwarn, hourlyAllowedcrit = None, None
	else:
		hourlyAllowedwarn, hourlyAllowedcrit = hourlyAllowedparams



	for hourlyInboundBlocked, hourlyInboundVirusBlocked, hourlyInboundRateControlled, hourlyInboundQuarantined, hourlyInboundTagged, hourlyAllowed in info[0]:

		# compare hourlyInboundBlocked measurement value against warn, crit thresholds
		if hourlyInboundBlockedcrit and hourlyInboundBlockedwarn:
			if saveint(hourlyInboundBlocked) >= hourlyInboundBlockedcrit:
				severity = "CRITICAL"
				rc = 2
				infotext += " hourlyInboundBlocked: %s Messages (!!)," % (hourlyInboundBlocked)
			elif saveint(hourlyInboundBlocked) >= hourlyInboundBlockedwarn:
				severity = "WARNING"
				rc = 1
				infotext += " hourlyInboundBlocked: %s Messages (!)," % (hourlyInboundBlocked)
			else:
				infotext += " hourlyInboundBlocked: %s Messages," % (hourlyInboundBlocked)
		else:
			infotext += " hourlyInboundBlocked: %s Messages," % (hourlyInboundBlocked)

		# compare hourlyInboundVirusBlocked measurement value against warn, crit thresholds
		if hourlyInboundVirusBlockedcrit and hourlyInboundVirusBlockedwarn:
			if saveint(hourlyInboundVirusBlocked) >= hourlyInboundVirusBlockedcrit:
				severity = "CRITICAL"
				rc = 2
				infotext += " hourlyInboundVirusBlocked: %s Messages (!!)," % (hourlyInboundVirusBlocked)
			elif saveint(hourlyInboundVirusBlocked) >= hourlyInboundVirusBlockedwarn:
				severity = "WARNING"
				rc = 1
				infotext += " hourlyInboundVirusBlocked: %s Messages (!)," % (hourlyInboundVirusBlocked)
			else:
				infotext += " hourlyInboundVirusBlocked: %s Messages," % (hourlyInboundVirusBlocked)
		else:
			infotext += " hourlyInboundVirusBlocked: %s Messages," % (hourlyInboundVirusBlocked)

		# compare hourlyInboundRateControlled measurement value against warn, crit thresholds
		if hourlyInboundRateControlledcrit and hourlyInboundRateControlledwarn:
			if saveint(hourlyInboundRateControlled) >= hourlyInboundRateControlledcrit:
				severity = "CRITICAL"
				rc = 2
				infotext += " hourlyInboundRateControlled: %s Messages (!!)," % (hourlyInboundRateControlled)
			elif saveint(hourlyInboundRateControlled) >= hourlyInboundRateControlledwarn:
				severity = "WARNING"
				rc = 1
				infotext += " hourlyInboundRateControlled: %s Messages (!)," % (hourlyInboundRateControlled)
			else:
				infotext += " hourlyInboundRateControlled: %s Messages," % (hourlyInboundRateControlled)
		else:
			infotext += " hourlyInboundRateControlled: %s Messages," % (hourlyInboundRateControlled)

		# compare hourlyInboundQuarantined measurement value against warn, crit thresholds
		if hourlyInboundQuarantinedcrit and hourlyInboundQuarantinedwarn:
			if saveint(hourlyInboundQuarantined) >= hourlyInboundQuarantinedcrit:
				severity = "CRITICAL"
				rc = 2
				infotext += " hourlyInboundQuarantined: %s Messages (!!)," % (hourlyInboundQuarantined)
			elif saveint(hourlyInboundQuarantined) >= hourlyInboundQuarantinedwarn:
				severity = "WARNING"
				rc = 1
				infotext += " hourlyInboundQuarantined: %s Messages (!)," % (hourlyInboundQuarantined)
			else:
				infotext += " hourlyInboundQuarantined: %s Messages," % (hourlyInboundQuarantined)
		else:
			infotext += " hourlyInboundQuarantined: %s Messages," % (hourlyInboundQuarantined)

		# compare hourlyInboundTagged measurement value against warn, crit thresholds
		if hourlyInboundTaggedcrit and hourlyInboundTaggedwarn:
			if saveint(hourlyInboundTagged) >= hourlyInboundTaggedcrit:
				severity = "CRITICAL"
				rc = 2
				infotext += " hourlyInboundTagged: %s Messages (!!)," % (hourlyInboundTagged)
			elif saveint(hourlyInboundTagged) >= hourlyInboundTaggedwarn:
				severity = "WARNING"
				rc = 1
				infotext += " hourlyInboundTagged: %s Messages (!)," % (hourlyInboundTagged)
			else:
				infotext += " hourlyInboundTagged: %s Messages," % (hourlyInboundTagged)
		else:
			infotext += " hourlyInboundTagged: %s Messages," % (hourlyInboundTagged)

		# compare hourlyAllowed measurement value against warn, crit thresholds
		if hourlyAllowedcrit and hourlyAllowedwarn:
			if saveint(hourlyAllowed) >= hourlyAllowedcrit:
				severity = "CRITICAL"
				rc = 2
				infotext += " hourlyAllowed: %s Messages (!!)," % (hourlyAllowed)
			elif saveint(hourlyAllowed) >= hourlyAllowedwarn:
				severity = "WARNING"
				rc = 1
				infotext += " hourlyAllowed: %s Messages (!)," % (hourlyAllowed)
			else:
				infotext += " hourlyAllowed: %s Messages," % (hourlyAllowed)
		else:
			infotext += " hourlyAllowed: %s Messages," % (hourlyAllowed)


		perfdata = [ ( "hourlyInboundBlocked", saveint(hourlyInboundBlocked), hourlyInboundBlockedwarn, hourlyInboundBlockedcrit ),
				( "hourlyInboundVirusBlocked", saveint(hourlyInboundVirusBlocked), hourlyInboundVirusBlockedwarn, hourlyInboundVirusBlockedcrit ),
				( "hourlyInboundRateControlled", saveint(hourlyInboundRateControlled), hourlyInboundRateControlledwarn, hourlyInboundRateControlledcrit ),
				( "hourlyInboundQuarantined", saveint(hourlyInboundQuarantined), hourlyInboundQuarantinedwarn, hourlyInboundQuarantinedcrit ),
				( "hourlyInboundTagged", saveint(hourlyInboundTagged), hourlyInboundTaggedwarn, hourlyInboundTaggedcrit ),
				( "hourlyAllowed", saveint(hourlyAllowed), hourlyAllowedwarn, hourlyAllowedcrit ) ]

		output = severity + " - " + infotext
		return (rc, output, perfdata)
	return (3, "UNKNOWN - item not found in snmp data")

check_info['barra_inbound'] = \
	  (check_barra_inbound, "%s", 1, inventory_barra_inbound)


snmp_info['barra_inbound'] = [ 
	( ".1.3.6.1.4.1.20632.2",[
		22, # "hourlyInboundBlocked"
		25, # "hourlyInboundVirusBlocked"
		28, # "hourlyInboundRateControlled"
		31, # "hourlyInboundQuarantined"
		34, # "hourlyInboundTagged"
		37, # "hourlyAllowed"
		]
	),
]

snmp_scan_functions["barra_inbound"] = \
lambda oid: "barracuda" in oid(".1.3.6.1.2.1.1.1.0").lower()
